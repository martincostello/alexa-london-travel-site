name: build

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.gitattributes'
      - '**/*.gitignore'
      - '**/*.md'
  pull_request:
    branches:
      - main
      - dotnet-vnext
      - dotnet-nightly
  workflow_dispatch:

permissions: {}

jobs:
  build:
    name: ${{ matrix.os-name }}
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 20

    env:
      AZURE_WEBAPP_NAME: londontravel-martincostello
      CONTAINER_REGISTRY: ${{ github.repository_owner }}.azurecr.io
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_GENERATE_ASPNET_CERTIFICATE: false
      DOTNET_NOLOGO: true
      DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: 1
      FORCE_COLOR: 1
      NUGET_XMLDOC_MODE: skip
      PUBLISH_CONTAINER: ${{ github.event.repository.fork == false && ((github.ref_name == github.event.repository.default_branch) || (github.actor == github.repository_owner)) && matrix.os-name == 'linux' }}
      TERM: xterm

    outputs:
      application-name: ${{ env.AZURE_WEBAPP_NAME }}
      container-registry: ${{ env.CONTAINER_REGISTRY }}
      container-tag: ${{ steps.publish-container.outputs.container-tag }}

    permissions:
      attestations: write
      contents: read
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - os-name: macos
            runner: macos-latest
          - os-name: linux
            runner: ubuntu-latest
          - os-name: windows
            runner: windows-latest

    steps:

    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        filter: 'tree:0'
        show-progress: false

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@3951f0dfe7a07e2313ec93c75700083e2005cbab # v4.3.0

    - name: Setup Node
      uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0
      with:
        node-version: '22'

    - name: Get npm cache directory
      id: npm-cache-dir
      shell: pwsh
      run: |
        "dir=$(npm config get cache)" >> ${env:GITHUB_OUTPUT}

    - name: Setup npm cache
      uses: actions/cache@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4.2.1
      id: npm-cache
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-

    - name: Setup NuGet cache
      uses: actions/cache@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4.2.1
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
        restore-keys: ${{ runner.os }}-nuget-

    - name: Setup Playwright cache
      uses: actions/cache@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4.2.1
      with:
        key: ${{ runner.os }}-playwright-${{ hashFiles('Directory.Packages.props') }}
        path: |
          ~/AppData/Local/ms-playwright
          ~/.cache/ms-playwright
          ~/Library/Caches/ms-playwright

    - name: Build, test and publish
      id: build
      shell: pwsh
      run: ./build.ps1

    - uses: codecov/codecov-action@0565863a31f2c772f9f0395002a31e3f06189574 # v5.4.0
      name: Upload coverage to Codecov
      with:
        flags: ${{ matrix.os-name }}
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Docker log in
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
      if: env.PUBLISH_CONTAINER == 'true'
      with:
        registry: ${{ env.CONTAINER_REGISTRY }}
        username: ${{ secrets.ACR_REGISTRY_USERNAME }}
        password: ${{ secrets.ACR_REGISTRY_PASSWORD }}

    - name: Publish container
      id: publish-container
      if: runner.os == 'Linux'
      env:
        ContainerRegistry: ${{ env.PUBLISH_CONTAINER == 'true' && env.CONTAINER_REGISTRY || '' }}
      run: dotnet publish ./src/LondonTravel.Site --arch x64 --os linux -p:PublishProfile=DefaultContainer

    - name: Attest container image
      uses: actions/attest-build-provenance@520d128f165991a6c774bcb264f323e3d70747f4 # v2.2.0
      if: steps.publish-container.outputs.container-digest != ''
      with:
        push-to-registry: true
        subject-digest: ${{ steps.publish-container.outputs.container-digest }}
        subject-name: ${{ steps.publish-container.outputs.container-image }}

    - name: Publish screenshots
      uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
      if: ${{ !cancelled() }}
      with:
        name: screenshots-${{ matrix.os-name }}
        path: ./artifacts/screenshots/*
        if-no-files-found: ignore

    - name: Publish traces
      uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
      if: ${{ !cancelled() }}
      with:
        name: traces-${{ matrix.os-name }}
        path: ./artifacts/traces/*
        if-no-files-found: ignore

    - name: Publish videos
      uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
      if: ${{ !cancelled() }}
      with:
        name: videos-${{ matrix.os-name }}
        path: ./artifacts/videos/*
        if-no-files-found: ignore

    - name: Upload any crash dumps
      shell: pwsh
      if: |
        !cancelled() &&
        steps.build.outcome == 'failure' &&
        github.event.repository.fork == false &&
        github.event.sender.login != 'dependabot[bot]'
      env:
        AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.CRASH_DUMPS_STORAGE_CONNECTION_STRING }}
        PSCOMPRESSION_VERSION: '2.1.0'
      run: |
        $dumps = Get-ChildItem -Path ${env:GITHUB_WORKSPACE} -Filter "*.dmp" -Recurse
        if ($null -ne $dumps) {

          $container = ${env:GITHUB_REPOSITORY}.Replace("/", "-")
          az storage container create --name $container --public-access off | Out-Null

          Install-Module PSCompression -RequiredVersion ${env:PSCOMPRESSION_VERSION} -AcceptLicense -Force -Scope CurrentUser

          $dumps | ForEach-Object {
            $zipPath = $_.FullName + ".zip"
            $zipName = $_.Name + ".zip"

            Write-Output "Compressing crash dump $($_.Name)..."
            Compress-ZipArchive -Path $_.FullName -Destination $zipPath

            az storage blob upload `
              --container-name $container `
              --file $zipPath `
              --name $zipName `
              --metadata "GITHUB_RUN_ATTEMPT=${env:GITHUB_RUN_ATTEMPT}" "GITHUB_WORKFLOW=${env:GITHUB_SERVER_URL}/${env:GITHUB_REPOSITORY}/actions/runs/${env:GITHUB_RUN_ID}" "RUNNER_OS=${env:RUNNER_OS}" `
              --overwrite true

            if ($LASTEXITCODE -eq 0) {
              Write-Output "::notice::Uploaded crash dump $($_.Name) to Azure Storage."
            }
          }
        }

  deploy-dev:
    if: github.event.repository.fork == false && github.ref_name == github.event.repository.default_branch
    name: dev
    needs: [ build ]
    uses: ./.github/workflows/deploy-app.yml
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    secrets: inherit
    with:
      application-name: ${{ needs.build.outputs.application-name }}
      container-image: ${{ needs.build.outputs.container-tag }}
      environment-name: dev
      environment-url: https://londontravel-dev.martincostello.com
      slot-name: dev

  deploy-prod:
    name: production
    needs: [ build, deploy-dev ]
    uses: ./.github/workflows/deploy-app.yml
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    secrets: inherit
    with:
      application-name: ${{ needs.build.outputs.application-name }}
      container-image: ${{ needs.build.outputs.container-tag }}
      environment-name: production
      environment-url: https://londontravel.martincostello.com
      slot-name: ''
