name: deploy

on:
  issue_comment:
    types: [ created ]

env:
  TERM: xterm

permissions: {}

jobs:
  setup:
    runs-on: ubuntu-latest
    if: |
      github.event.issue.pull_request != '' &&
      github.event.repository.fork == false &&
      github.triggering_actor == github.event.repository.owner.login &&
      startsWith(github.event.comment.body, '/deploy')

    env:
      ISSUE_NUMBER: ${{ github.event.issue.number }}

    outputs:
      application-name: ${{ steps.set-outputs.outputs.application-name }}
      application-slot: ${{ steps.set-outputs.outputs.application-slot }}
      application-url: ${{ steps.set-outputs.outputs.application-url }}
      container-tag: ${{ steps.set-outputs.outputs.container-tag }}
      environment-name: ${{ steps.get-environment-name.outputs.result }}
      environment-url: ${{ steps.set-outputs.outputs.environment-url }}
      issue-number: ${{ env.ISSUE_NUMBER }}
      run-sha: ${{ steps.get-run.outputs.run-sha }}
      workflow-url: ${{ steps.set-outputs.outputs.workflow-url }}

    permissions:
      actions: read
      contents: read

    steps:

    - name: Get environment name
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      id: get-environment-name
      with:
        result-encoding: string
        script: |
          const username = context.payload.comment.user.login;

          try {
            await github.rest.repos.checkCollaborator({
              owner: context.payload.repository.owner.login,
              repo: context.payload.repository.name,
              username,
            });
          } catch (err) {
            throw new Error(`Error: @${username} is not a repository collaborator.`);
          }

          const comment = context.payload.comment.body;
          const regex = /^\/deploy(\s+([a-zA-Z\d\-\_]+))?\s*$/;
          const arguments = regex.exec(comment);

          if (!arguments || arguments.length < 1) {
            throw new Error(`Invalid command: ${comment}`);
          }

          return arguments[2] || 'dev';

    - name: 'Find run for #${{ env.ISSUE_NUMBER }}'
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      id: get-run
      env:
        WORKFLOW_NAME: 'build'
      with:
        script: |
          const pull_number = process.env.ISSUE_NUMBER;
          const workflowName = process.env.WORKFLOW_NAME;

          const owner = context.repo.owner;
          const repo = context.repo.repo;

          core.debug(`Getting pull request ${owner}/${repo}#${pull_number}`);
          const { data: pull } = await github.rest.pulls.get({
            owner,
            repo,
            pull_number,
          });

          if (!pull) {
            throw new Error(`Pull request ${owner}/${repo}#${pull_number} not found.`);
          }

          const head_sha = pull.head.sha;
          core.debug(`Getting workflow runs for ${owner}/${repo}#${pull_number}@${head_sha}`);
          const { data: workflows } = await github.rest.actions.listWorkflowRunsForRepo({
            owner,
            repo,
            event: 'pull_request',
            head_sha,
            status: 'success',
          });
          const run = workflows.workflow_runs.find((run) => run.name === workflowName);

          if (!run) {
            throw new Error(`No successful workflow run found for ${owner}/${repo}@${head_sha.slice(0, 7)} with name ${workflowName}.`);
          }

          core.setOutput('run-number', run.run_number);
          core.setOutput('run-sha', pull.merge_commit_sha);

    - name: Set outputs
      id: set-outputs
      env:
        ARTIFACT_RUN_NUMBER: ${{ steps.get-run.outputs.run-number }}
        ENVIRONMENT_NAME: ${{ steps.get-environment-name.outputs.result }}
      shell: bash
      run: |
        application_name="londontravel-martincostello"
        container_tag="${GITHUB_REPOSITORY_OWNER}.azurecr.io/${GITHUB_REPOSITORY}:github-${ARTIFACT_RUN_NUMBER}"
        environment_url="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/deployments/${ENVIRONMENT_NAME}"
        workflow_url="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"

        if [ "${ENVIRONMENT_NAME}" == "production" ]
        then
          application_slot=""
          application_url="https://londontravel.martincostello.com"
        else
          application_slot="dev"
          application_url="https://londontravel-dev.martincostello.com"
        fi

        {
          echo "application-name=${application_name}"
          echo "application-slot=${application_slot}"
          echo "application-url=${application_url}"
          echo "container-tag=${container_tag}"
          echo "environment-url=${environment_url}"
          echo "workflow-url=${workflow_url}"
        } >> "${GITHUB_OUTPUT}"

  deploy:
    name: ${{ needs.setup.outputs.environment-name }}
    needs: [ setup ]
    uses: ./.github/workflows/deploy-app.yml
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    secrets: inherit
    with:
      application-name: ${{ needs.setup.outputs.application-name }}
      container-image: ${{ needs.setup.outputs.container-tag }}
      environment-name: ${{ needs.setup.outputs.environment-name }}
      environment-url: ${{ needs.setup.outputs.application-url }}
      issue-number: ${{ needs.setup.outputs.issue-number }}
      ref: ${{ needs.setup.outputs.run-sha }}
      slot-name: ${{ needs.setup.outputs.application-slot }}
      workflow-url: ${{ needs.setup.outputs.workflow-url }}
